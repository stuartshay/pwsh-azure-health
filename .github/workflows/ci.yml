name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: read
  id-token: write

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: src

jobs:
  lint_test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install PowerShell
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Install tooling modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Scope CurrentUser -Force
          Install-Module -Name Pester -MinimumVersion 5.4.0 -Scope CurrentUser -Force
          Install-Module -Name Az.Accounts -Scope CurrentUser -Force
          Install-Module -Name Az.Storage -Scope CurrentUser -Force
          Install-Module -Name Az.ResourceGraph -Scope CurrentUser -Force

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path ./src -Recurse -Settings ./.PSScriptAnalyzerSettings.psd1
          if ($results) {
            $errors = $results | Where-Object Severity -eq 'Error'
            if ($errors) {
              $errors | Format-Table -AutoSize | Out-String | Write-Host
              throw "PSScriptAnalyzer reported $($errors.Count) error(s)."
            }
            $warnings = $results | Where-Object Severity -eq 'Warning'
            if ($warnings) {
              $warnings | Format-Table -AutoSize | Out-String | Write-Host
            }
          }

      - name: Run Pester
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = 'tests'
          $config.Output.Verbosity = 'Detailed'
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = 'artifacts/test-results.xml'
          $config.Run.PassThru = $true

          $result = Invoke-Pester -Configuration $config
          if ($result.FailedCount -gt 0) {
            throw "Pester reported $($result.FailedCount) failure(s)."
          }

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: artifacts/test-results.xml
          retention-days: 14

  deploy:
    name: Deploy
    needs: lint_test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install PowerShell
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Package Functions
        run: |
          cd $AZURE_FUNCTIONAPP_PACKAGE_PATH
          zip -r ../functionapp.zip .

      - name: Deploy package
        run: |
          az functionapp deployment source config-zip \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --name "${{ secrets.FUNCTION_APP_NAME }}" \
            --src functionapp.zip
